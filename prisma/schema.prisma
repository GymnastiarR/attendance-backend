// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String @unique
  password String
  role     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id             Int     @id @default(autoincrement())
  name           String
  nis            String  @unique
  rfid           String? @unique
  isGraduated    Boolean @default(false)
  academicYearId Int
  classId        Int?

  AttendanceStudent AttendanceStudent[]
  AcademicYear      AcademicYear        @relation(fields: [academicYearId], references: [id])
  Class             Class?              @relation(fields: [classId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AcademicYear {
  id       Int     @id @default(autoincrement())
  year     String
  semester String
  isActive Boolean @default(false)

  Class      Class[]
  Attendance Attendance[]
  Student    Student[]

  @@unique([year, semester])
}

model Major {
  id   Int    @id @default(autoincrement())
  name String @unique

  Class Class[]
}

model Year {
  id   Int    @id @default(autoincrement())
  name String @unique

  Class Class[]
}

model Class {
  id               Int    @id @default(autoincrement())
  name             String
  academicYearId   Int
  majorId          Int
  yearId           Int
  // idRuangKelas   Int?
  attendanceUnitId Int?

  Year           Year            @relation(fields: [yearId], references: [id])
  Major          Major           @relation(fields: [majorId], references: [id])
  AcademicYear   AcademicYear    @relation(fields: [academicYearId], references: [id])
  // RuangKelas     RuangKelas?    @relation(fields: [idRuangKelas], references: [id])
  AttendanceUnit AttendanceUnit? @relation(fields: [attendanceUnitId], references: [id])
  Student        Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@unique([academicYearId, idRuangKelas])
  @@unique([academicYearId, majorId, yearId, name])
}

// model RuangKelas {
//   id    Int     @id @default(autoincrement())
//   nama  String
//   Class Class[]
// }

model Attendance {
  id             Int      @id @default(autoincrement())
  date           DateTime @db.Date
  academicYearId Int

  AcademicYear      AcademicYear        @relation(fields: [academicYearId], references: [id])
  AttendanceStudent AttendanceStudent[]

  @@unique([date])
}

model AttendanceStudent {
  id           Int       @id @default(autoincrement())
  attendanceId Int
  studentId    Int
  datePresence DateTime?
  status       String    @default("Alpa")

  Attendance Attendance @relation(fields: [attendanceId], references: [id])
  Student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([attendanceId, studentId], name: "presensi_siswa")
}

model AttendanceUnit {
  id         Int    @id @default(autoincrement())
  name       String
  identifier String @unique

  Class Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
