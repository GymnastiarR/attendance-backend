// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  name     String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id   Int    @id @default(autoincrement())
  name String
  nis  String @unique
  rfid Int?   @unique

  AttendanceStudent   AttendanceStudent[]
  ClassStudent        ClassStudent[]
  AcademicYearStudent AcademicYearStudent[]
  Rfid                Rfid?                 @relation(fields: [rfid], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AcademicYear {
  id       Int     @id @default(autoincrement())
  year     String
  semester String
  isActive Boolean @default(false)

  Class               Class[]
  Attendance          Attendance[]
  AcademicYearStudent AcademicYearStudent[]

  @@unique([year, semester])
}

model Major {
  id   Int    @id @default(autoincrement())
  name String @unique

  Class Class[]
}

model Year {
  id   Int    @id @default(autoincrement())
  name String @unique

  Class Class[]
}

model Class {
  id               Int    @id @default(autoincrement())
  name             String
  academicYearId   Int
  majorId          Int
  yearId           Int
  // idRuangKelas   Int?
  attendanceUnitId Int?

  Year           Year            @relation(fields: [yearId], references: [id])
  Major          Major           @relation(fields: [majorId], references: [id])
  AcademicYear   AcademicYear    @relation(fields: [academicYearId], references: [id])
  // RuangKelas     RuangKelas?    @relation(fields: [idRuangKelas], references: [id])
  AttendanceUnit AttendanceUnit? @relation(fields: [attendanceUnitId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ClassStudent ClassStudent[]

  // @@unique([academicYearId, idRuangKelas])
  @@unique([academicYearId, majorId, yearId, name])
}

// model RuangKelas {
//   id    Int     @id @default(autoincrement())
//   nama  String
//   Class Class[]
// }

model Attendance {
  id             Int      @id @default(autoincrement())
  date           DateTime @db.Date
  academicYearId Int

  AcademicYear      AcademicYear        @relation(fields: [academicYearId], references: [id])
  AttendanceStudent AttendanceStudent[]

  @@unique([date, academicYearId], name: "academic_year_date")
}

model AttendanceStudent {
  id           Int       @id @default(autoincrement())
  attendanceId Int
  studentId    Int
  datePresence DateTime?
  status       String    @default("Alpa")

  Attendance Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  Student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([attendanceId, studentId], name: "presensi_siswa")
}

model AttendanceUnit {
  id         Int    @id @default(autoincrement())
  name       String
  identifier String @unique

  Class Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassStudent {
  id        Int @id @default(autoincrement())
  classId   Int
  studentId Int

  Class   Class   @relation(fields: [classId], references: [id])
  Student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId], name: "class_student")
}

model AcademicYearStudent {
  id             Int @id @default(autoincrement())
  academicYearId Int
  studentId      Int

  AcademicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  Student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([academicYearId, studentId], name: "academic_year_student")
}

model Rfid {
  id      Int    @id @default(autoincrement())
  rfid    String @unique
  balance Int    @default(0) @db.UnsignedInt

  Student     Student?
  Transaction Transaction[]
}

model Store {
  id   Int    @id @default(autoincrement())
  name String

  Transaction Transaction[]

  deleted Boolean @default(false)
}

model Transaction {
  id      Int @id @default(autoincrement())
  storeId Int
  rfidId  Int

  date        DateTime @default(now())
  isPaid      Boolean  @default(false)
  totalAmount Int

  Store Store @relation(fields: [storeId], references: [id])
  RFID  Rfid  @relation(fields: [rfidId], references: [id])
}
